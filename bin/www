#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket_chatApp:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
// Socket application part
var io = require('socket.io')(server);
var usernames = {};
var numUsers = 0;
var onlineusers = {};
var colorindex = 0;
io.on('connection', function(socket){
    for(var i = 0 ; i < 3; i ++){
        socket.send({
            iconid: 1,
            username: 'node zj',
            msg: 'gaga gagaga!'
        });
    }

    socket.on('new message', function(data){
        var senderinfo = onlineusers[socket.id];
        debugger;
        for(var i = 0; i < data.dest.length; i ++){
            socket.to(data.dest[i]).emit('group msg', {
                iconid: senderinfo.iconid,
                username: senderinfo.username,
                msg : data.msg
            });
        }
    });
    socket.on('add new user', function (data) {
        // we tell the client to execute 'new message'
        onlineusers[socket.id] = {
            username: data.username,
            iconid : data.iconid,
            userid: socket.id,
            colorid : colorindex++
        };
        numUsers ++;
        socket.broadcast.emit('inf_updateUsers', onlineusers);
        socket.emit('ack_conn', socket.id);
    });

    // when the client emits 'typing', we broadcast it to others
    socket.on('typing', function () {
        socket.broadcast.emit('typing', {
            username: socket.username
        });
    });

    // when the client emits 'stop typing', we broadcast it to others
    socket.on('stop typing', function () {
        socket.broadcast.emit('stop typing', {
            username: socket.username
        });
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        delete onlineusers[socket.id];
        --numUsers;
        // echo globally that this client has left
        socket.broadcast.emit('user left', {
            username: socket.username,
            numUsers: numUsers
        });
    });
});


// Socket application part end
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
